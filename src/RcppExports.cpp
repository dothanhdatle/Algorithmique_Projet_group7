// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// svm_sgd_Rcpp
List svm_sgd_Rcpp(NumericMatrix X, NumericVector y, int epochs, double C, double learning_rate, double tolerance);
RcppExport SEXP _SVMalgo_svm_sgd_Rcpp(SEXP XSEXP, SEXP ySEXP, SEXP epochsSEXP, SEXP CSEXP, SEXP learning_rateSEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type epochs(epochsSEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    Rcpp::traits::input_parameter< double >::type learning_rate(learning_rateSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(svm_sgd_Rcpp(X, y, epochs, C, learning_rate, tolerance));
    return rcpp_result_gen;
END_RCPP
}
// linear_kernel
NumericMatrix linear_kernel(NumericMatrix X1);
RcppExport SEXP _SVMalgo_linear_kernel(SEXP X1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X1(X1SEXP);
    rcpp_result_gen = Rcpp::wrap(linear_kernel(X1));
    return rcpp_result_gen;
END_RCPP
}
// svm_smo_Rcpp
List svm_smo_Rcpp(NumericMatrix X, NumericVector y, double C, double tol, int max_passes);
RcppExport SEXP _SVMalgo_svm_smo_Rcpp(SEXP XSEXP, SEXP ySEXP, SEXP CSEXP, SEXP tolSEXP, SEXP max_passesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type C(CSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_passes(max_passesSEXP);
    rcpp_result_gen = Rcpp::wrap(svm_smo_Rcpp(X, y, C, tol, max_passes));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SVMalgo_svm_sgd_Rcpp", (DL_FUNC) &_SVMalgo_svm_sgd_Rcpp, 6},
    {"_SVMalgo_linear_kernel", (DL_FUNC) &_SVMalgo_linear_kernel, 1},
    {"_SVMalgo_svm_smo_Rcpp", (DL_FUNC) &_SVMalgo_svm_smo_Rcpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_SVMalgo(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
